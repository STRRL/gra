// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grad/v1/runner_service.proto

package gradv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerService_CreateRunner_FullMethodName         = "/grad.v1.RunnerService/CreateRunner"
	RunnerService_DeleteRunner_FullMethodName         = "/grad.v1.RunnerService/DeleteRunner"
	RunnerService_ListRunners_FullMethodName          = "/grad.v1.RunnerService/ListRunners"
	RunnerService_ExecuteCommandStream_FullMethodName = "/grad.v1.RunnerService/ExecuteCommandStream"
	RunnerService_GetRunner_FullMethodName            = "/grad.v1.RunnerService/GetRunner"
)

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RunnerService manages the lifecycle of runners in the grad system
type RunnerServiceClient interface {
	// CreateRunner creates a new runner instance
	CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error)
	// DeleteRunner removes a runner instance
	DeleteRunner(ctx context.Context, in *DeleteRunnerRequest, opts ...grpc.CallOption) (*DeleteRunnerResponse, error)
	// ListRunners returns all available runners
	ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error)
	// ExecuteCommandStream executes a command in a specific runner with streaming output
	ExecuteCommandStream(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteCommandStreamResponse], error)
	// GetRunner returns details about a specific runner
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
}

type runnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerServiceClient(cc grpc.ClientConnInterface) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_CreateRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) DeleteRunner(ctx context.Context, in *DeleteRunnerRequest, opts ...grpc.CallOption) (*DeleteRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_DeleteRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnersResponse)
	err := c.cc.Invoke(ctx, RunnerService_ListRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ExecuteCommandStream(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteCommandStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RunnerService_ServiceDesc.Streams[0], RunnerService_ExecuteCommandStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteCommandRequest, ExecuteCommandStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteCommandStreamClient = grpc.ServerStreamingClient[ExecuteCommandStreamResponse]

func (c *runnerServiceClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_GetRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServiceServer is the server API for RunnerService service.
// All implementations must embed UnimplementedRunnerServiceServer
// for forward compatibility.
//
// RunnerService manages the lifecycle of runners in the grad system
type RunnerServiceServer interface {
	// CreateRunner creates a new runner instance
	CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error)
	// DeleteRunner removes a runner instance
	DeleteRunner(context.Context, *DeleteRunnerRequest) (*DeleteRunnerResponse, error)
	// ListRunners returns all available runners
	ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error)
	// ExecuteCommandStream executes a command in a specific runner with streaming output
	ExecuteCommandStream(*ExecuteCommandRequest, grpc.ServerStreamingServer[ExecuteCommandStreamResponse]) error
	// GetRunner returns details about a specific runner
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	mustEmbedUnimplementedRunnerServiceServer()
}

// UnimplementedRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerServiceServer struct{}

func (UnimplementedRunnerServiceServer) CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedRunnerServiceServer) DeleteRunner(context.Context, *DeleteRunnerRequest) (*DeleteRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunner not implemented")
}
func (UnimplementedRunnerServiceServer) ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedRunnerServiceServer) ExecuteCommandStream(*ExecuteCommandRequest, grpc.ServerStreamingServer[ExecuteCommandStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteCommandStream not implemented")
}
func (UnimplementedRunnerServiceServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedRunnerServiceServer) mustEmbedUnimplementedRunnerServiceServer() {}
func (UnimplementedRunnerServiceServer) testEmbeddedByValue()                       {}

// UnsafeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServiceServer will
// result in compilation errors.
type UnsafeRunnerServiceServer interface {
	mustEmbedUnimplementedRunnerServiceServer()
}

func RegisterRunnerServiceServer(s grpc.ServiceRegistrar, srv RunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerService_ServiceDesc, srv)
}

func _RunnerService_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CreateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CreateRunner(ctx, req.(*CreateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_DeleteRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).DeleteRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_DeleteRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).DeleteRunner(ctx, req.(*DeleteRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ListRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ListRunners(ctx, req.(*ListRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ExecuteCommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServiceServer).ExecuteCommandStream(m, &grpc.GenericServerStream[ExecuteCommandRequest, ExecuteCommandStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteCommandStreamServer = grpc.ServerStreamingServer[ExecuteCommandStreamResponse]

func _RunnerService_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_GetRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerService_ServiceDesc is the grpc.ServiceDesc for RunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grad.v1.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _RunnerService_CreateRunner_Handler,
		},
		{
			MethodName: "DeleteRunner",
			Handler:    _RunnerService_DeleteRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _RunnerService_ListRunners_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _RunnerService_GetRunner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteCommandStream",
			Handler:       _RunnerService_ExecuteCommandStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grad/v1/runner_service.proto",
}
